const preactCliTypeScript = require('preact-cli-plugin-typescript');
const webpack = require('webpack');

/**
 * Function that mutates original webpack config.
 * Supports asynchronous changes when promise is returned.
 *
 * @param {object} config original webpack config.
 * @param {object} env options passed to CLI.
 * @param {WebpackConfigHelpers} helpers object with useful helpers when working with config.
 **/
export default function (config, env, helpers) {

  //////////////////////////////////////////////////////////////
  // Replace css-loader with typings-for-css-modules-loader
  let loaders = helpers.getLoadersByName(config, 'css-loader');

  loaders[0].rule.loader.splice(2, 1, {
    loader: 'typings-for-css-modules-loader',
    options: {
      url: false,
      import: false,
      modules: true,
      sourceMap: true,
      localIdentName: '[local]__[hash:base64:5]',
      camelCase: 'dashesOnly',
      importLoaders: 1,
      namedExport: true,
      banner: '// Automatically generated by typings-for-css-modules. Do not change this file!',
    }
  });

  loaders[1].rule.loader.splice(2, 1, {
    loader: 'typings-for-css-modules-loader',
    options: {
      url: false,
      import: false,
      modules: false, //Set true if globals should be d.ts as well.
      sourceMap: false,
      localIdentName: '[local]',
      camelCase: 'dashesOnly',
      namedExport: false, //Set true if modules true.
      banner: '// Automatically generated by typings-for-css-modules. Do not change this file!',
      silent: true
    }
  });


  //////////////////////////////////////////////////////////////
  // Use TypeScript instead of js.
  preactCliTypeScript(config);

  loaders = helpers.getLoadersByName(config, 'awesome-typescript-loader');

  loaders[0].rule.options = {
    useCache: true,
    files: "src/**/*.{ts,tsx}",
    forceIsolatedModules: true,
    reportFiles: [
      "src/**/*.{ts,tsx}"
    ],
    useTranspileModule: true
  };


  //////////////////////////////////////////////////////////////
  // Ignore watching d.ts files
  config.plugins.push(new webpack.WatchIgnorePlugin([/\.d\.ts$/]));


  ////////////////////////////////////////////
  // No source maps.
  //config.module.loaders[2].use[0].options.options.sourceMap = false;
  //config.module.loaders[4].loader[3].options.sourceMap = false;

  //let plugins = helpers.getPluginsByName(config, 'UglifyJsPlugin')[0];
  //if (plugins != undefined) plugins.plugin.options.sourceMap = false;
}